{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\johan\\\\Desktop\\\\league-manager-react\\\\frontend\\\\src\\\\components\\\\GraphSection.js\",\n  _s = $RefreshSig$();\n// components/GraphSection.js\nimport React, { useState, useEffect } from \"react\";\nimport LineChart from \"./LineChart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphSection = () => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  useEffect(() => {\n    fetch(\"https://api.blackultras.com/api/stats\").then(response => response.json()).then(data => {\n      // Assuming your data contains a list of game records\n      const gameRecords = data.game_records; // Adjust this based on your API's response structure\n\n      // Calculate average scores for each game\n      const averageScores = gameRecords.map(game => {\n        const totalScore = game.players.reduce((sum, player) => sum + player.score, 0);\n        const avgScore = totalScore / game.players.length;\n        return {\n          date: game.date,\n          averageScore: avgScore\n        }; // Adjust the field names based on your API\n      });\n\n      // Prepare data for Chart.js\n      const chartData = {\n        labels: averageScores.map(record => record.date),\n        // Dates as X-axis labels\n        datasets: [{\n          label: \"Average Score\",\n          data: averageScores.map(record => record.averageScore),\n          // Average scores as Y-axis data\n          borderColor: \"rgba(75,192,192,1)\",\n          backgroundColor: \"rgba(75,192,192,0.2)\",\n          borderWidth: 2\n        }]\n      };\n      setChartData(chartData);\n    }).catch(err => console.error(\"Failed to fetch stats:\", err));\n  }, []);\n  if (!chartData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading chart...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 26\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-section\",\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      chartData: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphSection, \"9euvDhZ+n6eLTlbzwvHmNPhoqAw=\");\n_c = GraphSection;\nexport default GraphSection;\nvar _c;\n$RefreshReg$(_c, \"GraphSection\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","jsxDEV","_jsxDEV","GraphSection","_s","chartData","setChartData","fetch","then","response","json","data","gameRecords","game_records","averageScores","map","game","totalScore","players","reduce","sum","player","score","avgScore","length","date","averageScore","labels","record","datasets","label","borderColor","backgroundColor","borderWidth","catch","err","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/Users/johan/Desktop/league-manager-react/frontend/src/components/GraphSection.js"],"sourcesContent":["// components/GraphSection.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport LineChart from \"./LineChart\";\r\n\r\nconst GraphSection = () => {\r\n  const [chartData, setChartData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://api.blackultras.com/api/stats\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // Assuming your data contains a list of game records\r\n        const gameRecords = data.game_records; // Adjust this based on your API's response structure\r\n\r\n        // Calculate average scores for each game\r\n        const averageScores = gameRecords.map((game) => {\r\n          const totalScore = game.players.reduce((sum, player) => sum + player.score, 0);\r\n          const avgScore = totalScore / game.players.length;\r\n          return { date: game.date, averageScore: avgScore }; // Adjust the field names based on your API\r\n        });\r\n\r\n        // Prepare data for Chart.js\r\n        const chartData = {\r\n          labels: averageScores.map((record) => record.date), // Dates as X-axis labels\r\n          datasets: [\r\n            {\r\n              label: \"Average Score\",\r\n              data: averageScores.map((record) => record.averageScore), // Average scores as Y-axis data\r\n              borderColor: \"rgba(75,192,192,1)\",\r\n              backgroundColor: \"rgba(75,192,192,0.2)\",\r\n              borderWidth: 2\r\n            }\r\n          ]\r\n        };\r\n\r\n        setChartData(chartData);\r\n      })\r\n      .catch((err) => console.error(\"Failed to fetch stats:\", err));\r\n  }, []);\r\n\r\n  if (!chartData) return <div>Loading chart...</div>;\r\n\r\n  return (\r\n    <div className=\"graph-section\">\r\n      <LineChart chartData={chartData} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphSection;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACdQ,KAAK,CAAC,uCAAuC,CAAC,CAC3CC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACd;MACA,MAAMC,WAAW,GAAGD,IAAI,CAACE,YAAY,CAAC,CAAC;;MAEvC;MACA,MAAMC,aAAa,GAAGF,WAAW,CAACG,GAAG,CAAEC,IAAI,IAAK;QAC9C,MAAMC,UAAU,GAAGD,IAAI,CAACE,OAAO,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,MAAM,KAAKD,GAAG,GAAGC,MAAM,CAACC,KAAK,EAAE,CAAC,CAAC;QAC9E,MAAMC,QAAQ,GAAGN,UAAU,GAAGD,IAAI,CAACE,OAAO,CAACM,MAAM;QACjD,OAAO;UAAEC,IAAI,EAAET,IAAI,CAACS,IAAI;UAAEC,YAAY,EAAEH;QAAS,CAAC,CAAC,CAAC;MACtD,CAAC,CAAC;;MAEF;MACA,MAAMlB,SAAS,GAAG;QAChBsB,MAAM,EAAEb,aAAa,CAACC,GAAG,CAAEa,MAAM,IAAKA,MAAM,CAACH,IAAI,CAAC;QAAE;QACpDI,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,eAAe;UACtBnB,IAAI,EAAEG,aAAa,CAACC,GAAG,CAAEa,MAAM,IAAKA,MAAM,CAACF,YAAY,CAAC;UAAE;UAC1DK,WAAW,EAAE,oBAAoB;UACjCC,eAAe,EAAE,sBAAsB;UACvCC,WAAW,EAAE;QACf,CAAC;MAEL,CAAC;MAED3B,YAAY,CAACD,SAAS,CAAC;IACzB,CAAC,CAAC,CACD6B,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEF,GAAG,CAAC,CAAC;EACjE,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAAC9B,SAAS,EAAE,oBAAOH,OAAA;IAAAoC,QAAA,EAAK;EAAgB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAElD,oBACExC,OAAA;IAAKyC,SAAS,EAAC,eAAe;IAAAL,QAAA,eAC5BpC,OAAA,CAACF,SAAS;MAACK,SAAS,EAAEA;IAAU;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CAAC;AAEV,CAAC;AAACtC,EAAA,CA3CID,YAAY;AAAAyC,EAAA,GAAZzC,YAAY;AA6ClB,eAAeA,YAAY;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}