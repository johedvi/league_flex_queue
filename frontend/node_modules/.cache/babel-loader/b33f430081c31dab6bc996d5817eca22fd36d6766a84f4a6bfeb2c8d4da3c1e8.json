{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\johan\\\\Desktop\\\\league-manager-react\\\\frontend\\\\src\\\\components\\\\GraphSection.js\",\n  _s = $RefreshSig$();\n// components/GraphSection.js\nimport React, { useState, useEffect } from \"react\";\nimport LineChart from \"./LineChart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphSection = () => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  useEffect(() => {\n    // Dummy data for two players\n    const dummyData = {\n      player_scores: {\n        \"Player1\": [{\n          score: 15,\n          match_date: \"2023-12-01\"\n        }, {\n          score: 20,\n          match_date: \"2023-12-02\"\n        }, {\n          score: 18,\n          match_date: \"2023-12-03\"\n        }, {\n          score: 22,\n          match_date: \"2023-12-04\"\n        }, {\n          score: 16,\n          match_date: \"2023-12-05\"\n        }, {\n          score: 19,\n          match_date: \"2023-12-06\"\n        }, {\n          score: 14,\n          match_date: \"2023-12-07\"\n        }, {\n          score: 25,\n          match_date: \"2023-12-08\"\n        }, {\n          score: 21,\n          match_date: \"2023-12-09\"\n        }, {\n          score: 17,\n          match_date: \"2023-12-10\"\n        }],\n        \"Player2\": [{\n          score: 10,\n          match_date: \"2023-12-01\"\n        }, {\n          score: 12,\n          match_date: \"2023-12-02\"\n        }, {\n          score: 14,\n          match_date: \"2023-12-03\"\n        }, {\n          score: 15,\n          match_date: \"2023-12-04\"\n        }, {\n          score: 13,\n          match_date: \"2023-12-05\"\n        }, {\n          score: 11,\n          match_date: \"2023-12-06\"\n        }, {\n          score: 12,\n          match_date: \"2023-12-07\"\n        }, {\n          score: 16,\n          match_date: \"2023-12-08\"\n        }, {\n          score: 18,\n          match_date: \"2023-12-09\"\n        }, {\n          score: 14,\n          match_date: \"2023-12-10\"\n        }]\n      }\n    };\n\n    // Process the dummy data to prepare the chart\n    const playerScores = dummyData.player_scores;\n    const labels = []; // To store unique match dates\n    const datasets = []; // To store player-specific score datasets\n\n    Object.entries(playerScores).forEach(([playerName, games]) => {\n      // Extract dates and scores for the player\n      games.forEach(game => {\n        if (!labels.includes(game.match_date)) {\n          labels.push(game.match_date);\n        }\n      });\n\n      // Create a dataset for the player\n      datasets.push({\n        label: playerName,\n        // Player's name\n        data: games.map(game => game.score),\n        // Player's scores\n        borderColor: `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 1)`,\n        backgroundColor: \"rgba(0, 0, 0, 0)\",\n        // Transparent\n        borderWidth: 2\n      });\n    });\n\n    // Prepare the chart data\n    const chartData = {\n      labels,\n      // X-axis labels (match dates)\n      datasets // Y-axis datasets (scores for each player)\n    };\n    setChartData(chartData);\n  }, []);\n  if (!chartData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading chart...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 26\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-section\",\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      chartData: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphSection, \"9euvDhZ+n6eLTlbzwvHmNPhoqAw=\");\n_c = GraphSection;\nexport default GraphSection;\nvar _c;\n$RefreshReg$(_c, \"GraphSection\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","jsxDEV","_jsxDEV","GraphSection","_s","chartData","setChartData","dummyData","player_scores","score","match_date","playerScores","labels","datasets","Object","entries","forEach","playerName","games","game","includes","push","label","data","map","borderColor","Math","floor","random","backgroundColor","borderWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/Users/johan/Desktop/league-manager-react/frontend/src/components/GraphSection.js"],"sourcesContent":["// components/GraphSection.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport LineChart from \"./LineChart\";\r\n\r\nconst GraphSection = () => {\r\n  const [chartData, setChartData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Dummy data for two players\r\n    const dummyData = {\r\n      player_scores: {\r\n        \"Player1\": [\r\n          { score: 15, match_date: \"2023-12-01\" },\r\n          { score: 20, match_date: \"2023-12-02\" },\r\n          { score: 18, match_date: \"2023-12-03\" },\r\n          { score: 22, match_date: \"2023-12-04\" },\r\n          { score: 16, match_date: \"2023-12-05\" },\r\n          { score: 19, match_date: \"2023-12-06\" },\r\n          { score: 14, match_date: \"2023-12-07\" },\r\n          { score: 25, match_date: \"2023-12-08\" },\r\n          { score: 21, match_date: \"2023-12-09\" },\r\n          { score: 17, match_date: \"2023-12-10\" },\r\n        ],\r\n        \"Player2\": [\r\n          { score: 10, match_date: \"2023-12-01\" },\r\n          { score: 12, match_date: \"2023-12-02\" },\r\n          { score: 14, match_date: \"2023-12-03\" },\r\n          { score: 15, match_date: \"2023-12-04\" },\r\n          { score: 13, match_date: \"2023-12-05\" },\r\n          { score: 11, match_date: \"2023-12-06\" },\r\n          { score: 12, match_date: \"2023-12-07\" },\r\n          { score: 16, match_date: \"2023-12-08\" },\r\n          { score: 18, match_date: \"2023-12-09\" },\r\n          { score: 14, match_date: \"2023-12-10\" },\r\n        ]\r\n      }\r\n    };\r\n\r\n    // Process the dummy data to prepare the chart\r\n    const playerScores = dummyData.player_scores;\r\n\r\n    const labels = []; // To store unique match dates\r\n    const datasets = []; // To store player-specific score datasets\r\n\r\n    Object.entries(playerScores).forEach(([playerName, games]) => {\r\n      // Extract dates and scores for the player\r\n      games.forEach((game) => {\r\n        if (!labels.includes(game.match_date)) {\r\n          labels.push(game.match_date);\r\n        }\r\n      });\r\n\r\n      // Create a dataset for the player\r\n      datasets.push({\r\n        label: playerName, // Player's name\r\n        data: games.map((game) => game.score), // Player's scores\r\n        borderColor: `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 1)`,\r\n        backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent\r\n        borderWidth: 2\r\n      });\r\n    });\r\n\r\n    // Prepare the chart data\r\n    const chartData = {\r\n      labels, // X-axis labels (match dates)\r\n      datasets // Y-axis datasets (scores for each player)\r\n    };\r\n\r\n    setChartData(chartData);\r\n  }, []);\r\n\r\n  if (!chartData) return <div>Loading chart...</div>;\r\n\r\n  return (\r\n    <div className=\"graph-section\">\r\n      <LineChart chartData={chartData} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphSection;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}