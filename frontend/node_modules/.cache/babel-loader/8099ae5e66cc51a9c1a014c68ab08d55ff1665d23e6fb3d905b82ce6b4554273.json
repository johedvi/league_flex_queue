{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\johan\\\\Desktop\\\\league-manager-react\\\\frontend\\\\src\\\\components\\\\GraphSection.js\",\n  _s = $RefreshSig$();\n// components/GraphSection.js\nimport React, { useState, useEffect } from \"react\";\nimport LineChart from \"./LineChart\";\nimport './GraphSection.css'; // Optional: For styling purposes\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphSection = () => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  useEffect(() => {\n    // Fetch data from the API endpoint\n    fetch(\"https://api.blackultras.com/api/scores\").then(response => response.json()).then(data => {\n      // Process the fetched data to prepare the chart\n      const playerScores = data.player_scores; // This is the data from your API\n\n      const labels = Array.from({\n        length: 10\n      }, (_, i) => `Game ${i + 1}`); // X-axis: 1 to 10\n      const datasets = []; // To store player-specific score datasets\n\n      Object.entries(playerScores).forEach(([playerName, games]) => {\n        // Create a dataset for each player\n        datasets.push({\n          label: playerName,\n          // Player's name\n          data: games,\n          // Player's scores\n          borderColor: `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 1)`,\n          backgroundColor: \"rgba(0, 0, 0, 0)\",\n          // Transparent background\n          borderWidth: 2\n        });\n      });\n\n      // Prepare the chart data\n      const chartData = {\n        labels,\n        // X-axis labels (1 to 10 for game numbers)\n        datasets // Y-axis datasets (scores for each player)\n      };\n      setChartData(chartData);\n    }).catch(err => console.error(\"Failed to fetch data:\", err));\n  }, []); // Empty dependency array to ensure the effect runs only once on component mount\n\n  if (!chartData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading chart...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 26\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-section\",\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      chartData: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphSection, \"9euvDhZ+n6eLTlbzwvHmNPhoqAw=\");\n_c = GraphSection;\nexport default GraphSection;\nvar _c;\n$RefreshReg$(_c, \"GraphSection\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","jsxDEV","_jsxDEV","GraphSection","_s","chartData","setChartData","fetch","then","response","json","data","playerScores","player_scores","labels","Array","from","length","_","i","datasets","Object","entries","forEach","playerName","games","push","label","borderColor","Math","floor","random","backgroundColor","borderWidth","catch","err","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/Users/johan/Desktop/league-manager-react/frontend/src/components/GraphSection.js"],"sourcesContent":["// components/GraphSection.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport LineChart from \"./LineChart\";\r\nimport './GraphSection.css'; // Optional: For styling purposes\r\n\r\nconst GraphSection = () => {\r\n  const [chartData, setChartData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch data from the API endpoint\r\n    fetch(\"https://api.blackultras.com/api/scores\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // Process the fetched data to prepare the chart\r\n        const playerScores = data.player_scores; // This is the data from your API\r\n\r\n        const labels = Array.from({ length: 10 }, (_, i) => `Game ${i + 1}`); // X-axis: 1 to 10\r\n        const datasets = []; // To store player-specific score datasets\r\n\r\n        Object.entries(playerScores).forEach(([playerName, games]) => {\r\n          // Create a dataset for each player\r\n          datasets.push({\r\n            label: playerName, // Player's name\r\n            data: games, // Player's scores\r\n            borderColor: `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 1)`,\r\n            backgroundColor: \"rgba(0, 0, 0, 0)\", // Transparent background\r\n            borderWidth: 2\r\n          });\r\n        });\r\n\r\n        // Prepare the chart data\r\n        const chartData = {\r\n          labels, // X-axis labels (1 to 10 for game numbers)\r\n          datasets // Y-axis datasets (scores for each player)\r\n        };\r\n\r\n        setChartData(chartData);\r\n      })\r\n      .catch((err) => console.error(\"Failed to fetch data:\", err));\r\n  }, []); // Empty dependency array to ensure the effect runs only once on component mount\r\n\r\n  if (!chartData) return <div>Loading chart...</div>;\r\n\r\n  return (\r\n    <div className=\"graph-section\">\r\n      <LineChart chartData={chartData} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphSection;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAO,oBAAoB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd;IACAQ,KAAK,CAAC,wCAAwC,CAAC,CAC5CC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACd;MACA,MAAMC,YAAY,GAAGD,IAAI,CAACE,aAAa,CAAC,CAAC;;MAEzC,MAAMC,MAAM,GAAGC,KAAK,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAE;MAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAK,QAAQA,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;MACtE,MAAMC,QAAQ,GAAG,EAAE,CAAC,CAAC;;MAErBC,MAAM,CAACC,OAAO,CAACV,YAAY,CAAC,CAACW,OAAO,CAAC,CAAC,CAACC,UAAU,EAAEC,KAAK,CAAC,KAAK;QAC5D;QACAL,QAAQ,CAACM,IAAI,CAAC;UACZC,KAAK,EAAEH,UAAU;UAAE;UACnBb,IAAI,EAAEc,KAAK;UAAE;UACbG,WAAW,EAAE,QAAQC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,KAAKF,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,KAAKF,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,MAAM;UAClIC,eAAe,EAAE,kBAAkB;UAAE;UACrCC,WAAW,EAAE;QACf,CAAC,CAAC;MACJ,CAAC,CAAC;;MAEF;MACA,MAAM5B,SAAS,GAAG;QAChBS,MAAM;QAAE;QACRM,QAAQ,CAAC;MACX,CAAC;MAEDd,YAAY,CAACD,SAAS,CAAC;IACzB,CAAC,CAAC,CACD6B,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAAC,CAAC;EAChE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,IAAI,CAAC9B,SAAS,EAAE,oBAAOH,OAAA;IAAAoC,QAAA,EAAK;EAAgB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAElD,oBACExC,OAAA;IAAKyC,SAAS,EAAC,eAAe;IAAAL,QAAA,eAC5BpC,OAAA,CAACF,SAAS;MAACK,SAAS,EAAEA;IAAU;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CAAC;AAEV,CAAC;AAACtC,EAAA,CA3CID,YAAY;AAAAyC,EAAA,GAAZzC,YAAY;AA6ClB,eAAeA,YAAY;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}