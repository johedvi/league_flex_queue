{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\johan\\\\Desktop\\\\league-manager-react\\\\frontend\\\\src\\\\components\\\\WheelSection.js\",\n  _s = $RefreshSig$();\n// src/components/WheelSection.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport './WheelSection.css'; // Optional: For styling purposes\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WheelSection = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [segments, setSegments] = useState([]);\n  const [colors, setColors] = useState([]);\n  const [isSpinning, setIsSpinning] = useState(false);\n  const [result, setResult] = useState('');\n  const [nameField, setNameField] = useState('');\n  const startAngle = useRef(0);\n  const spinTimeout = useRef(null);\n  const spinAngleStart = useRef(0);\n  const spinTime = useRef(0);\n  const spinTimeTotal = useRef(0);\n  const arc = useRef(0);\n\n  // Function to generate a unique color using HSL for better distinction\n  const getUniqueColor = (index, total) => {\n    const hue = index * (360 / total);\n    return `hsl(${hue}, 80%, 60%)`;\n  };\n\n  // Initialize the wheel\n  useEffect(() => {\n    drawWheel();\n    // Cleanup on unmount\n    return () => clearTimeout(spinTimeout.current);\n  }, [segments, colors]);\n  const addName = () => {\n    const name = nameField.trim();\n    if (name && !segments.includes(name)) {\n      const newSegments = [...segments, name];\n      setSegments(newSegments);\n      setColors(newSegments.map((_, idx) => getUniqueColor(idx, newSegments.length)));\n      setNameField('');\n    }\n  };\n  const clearSegments = () => {\n    setSegments([]);\n    setColors([]);\n    setResult(''); // Clear any result message\n    startAngle.current = 0; // Reset the wheel angle if desired\n  };\n  const drawWheel = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    const numSegments = segments.length;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    if (numSegments === 0) {\n      // Draw default wheel if no segments\n      const defaultColor = '#cccccc';\n      ctx.fillStyle = defaultColor;\n      ctx.beginPath();\n      ctx.arc(canvas.width / 2, canvas.height / 2, canvas.width / 2 - 5, 0, Math.PI * 2, false);\n      ctx.fill();\n\n      // Draw border\n      ctx.lineWidth = 5;\n      ctx.strokeStyle = '#333';\n      ctx.stroke();\n\n      // Draw center circle\n      ctx.beginPath();\n      ctx.arc(canvas.width / 2, canvas.height / 2, 20, 0, Math.PI * 2, false);\n      ctx.fillStyle = '#ffffff';\n      ctx.fill();\n      ctx.lineWidth = 2;\n      ctx.strokeStyle = '#333';\n      ctx.stroke();\n      return;\n    }\n    arc.current = Math.PI * 2 / numSegments;\n    for (let i = 0; i < numSegments; i++) {\n      const angle = startAngle.current + i * arc.current;\n      ctx.fillStyle = colors[i] || getUniqueColor(i, numSegments);\n      ctx.beginPath();\n      ctx.moveTo(canvas.width / 2, canvas.height / 2);\n      ctx.arc(canvas.width / 2, canvas.height / 2, canvas.width / 2 - 5, angle, angle + arc.current, false);\n      ctx.lineTo(canvas.width / 2, canvas.height / 2);\n      ctx.fill();\n    }\n\n    // Draw center circle\n    ctx.beginPath();\n    ctx.arc(canvas.width / 2, canvas.height / 2, 20, 0, Math.PI * 2, false);\n    ctx.fillStyle = '#ffffff';\n    ctx.fill();\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = '#333';\n    ctx.stroke();\n\n    // Draw outer border\n    ctx.beginPath();\n    ctx.arc(canvas.width / 2, canvas.height / 2, canvas.width / 2 - 5, 0, Math.PI * 2, false);\n    ctx.lineWidth = 5;\n    ctx.strokeStyle = '#333';\n    ctx.stroke();\n\n    // Draw text labels\n    for (let i = 0; i < numSegments; i++) {\n      const angle = startAngle.current + i * arc.current + arc.current / 2;\n      ctx.save();\n      ctx.translate(canvas.width / 2, canvas.height / 2);\n      ctx.rotate(angle);\n      ctx.textAlign = 'right';\n      ctx.fillStyle = '#fff';\n      ctx.font = '12px Arial';\n      ctx.fillText(segments[i], canvas.width / 2 - 15, 5);\n      ctx.restore();\n    }\n  };\n  const spin = () => {\n    if (isSpinning || segments.length === 0) return;\n    setIsSpinning(true);\n    spinAngleStart.current = Math.random() * 10 + 10; // Random spin angle between 10-20\n    spinTime.current = 0;\n    spinTimeTotal.current = Math.random() * 3000 + 4000; // Spin duration between 4-7 seconds\n    rotateWheel();\n  };\n  const rotateWheel = () => {\n    spinTime.current += 30;\n    if (spinTime.current >= spinTimeTotal.current) {\n      stopRotateWheel();\n      return;\n    }\n    const spinAngle = spinAngleStart.current - easeOut(spinTime.current, 0, spinAngleStart.current, spinTimeTotal.current);\n    startAngle.current += spinAngle * Math.PI / 180;\n    drawWheel();\n    spinTimeout.current = setTimeout(rotateWheel, 30);\n  };\n  const stopRotateWheel = () => {\n    clearTimeout(spinTimeout.current);\n    const degrees = startAngle.current * 180 / Math.PI + 90; // +90 to align with arrow pointing downward\n    const arcd = arc.current * 180 / Math.PI;\n    const index = Math.floor((360 - degrees % 360) / arcd);\n    const selected = segments[index % segments.length];\n    setResult(`ðŸŽ‰ You won: ${selected}! ðŸŽ‰`);\n    setIsSpinning(false);\n  };\n  const easeOut = (t, b, c, d) => {\n    const ts = (t /= d) * t;\n    const tc = ts * t;\n    return b + c * (tc + -3 * ts + 3 * t);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wheel-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Spin the Wheel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wheel-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: \"200\",\n        height: \"200\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"arrow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nameInput\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: nameField,\n        onChange: e => setNameField(e.target.value),\n        placeholder: \"Enter name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addName,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearSegments,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: spin,\n      children: \"Spin the Wheel!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nameList\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Participants:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), \" \", segments.length > 0 ? segments.join(', ') : 'None']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result\",\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n_s(WheelSection, \"OSdylg3YxNQ6o0N5PK+qMecBbeg=\");\n_c = WheelSection;\nexport default WheelSection;\nvar _c;\n$RefreshReg$(_c, \"WheelSection\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","WheelSection","_s","canvasRef","segments","setSegments","colors","setColors","isSpinning","setIsSpinning","result","setResult","nameField","setNameField","startAngle","spinTimeout","spinAngleStart","spinTime","spinTimeTotal","arc","getUniqueColor","index","total","hue","drawWheel","clearTimeout","current","addName","name","trim","includes","newSegments","map","_","idx","length","clearSegments","canvas","ctx","getContext","numSegments","clearRect","width","height","defaultColor","fillStyle","beginPath","Math","PI","fill","lineWidth","strokeStyle","stroke","i","angle","moveTo","lineTo","save","translate","rotate","textAlign","font","fillText","restore","spin","random","rotateWheel","stopRotateWheel","spinAngle","easeOut","setTimeout","degrees","arcd","floor","selected","t","b","c","d","ts","tc","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","value","onChange","e","target","placeholder","onClick","join","_c","$RefreshReg$"],"sources":["C:/Users/johan/Desktop/league-manager-react/frontend/src/components/WheelSection.js"],"sourcesContent":["// src/components/WheelSection.js\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport './WheelSection.css'; // Optional: For styling purposes\r\n\r\nconst WheelSection = () => {\r\n  const canvasRef = useRef(null);\r\n  const [segments, setSegments] = useState([]);\r\n  const [colors, setColors] = useState([]);\r\n  const [isSpinning, setIsSpinning] = useState(false);\r\n  const [result, setResult] = useState('');\r\n  const [nameField, setNameField] = useState('');\r\n\r\n  const startAngle = useRef(0);\r\n  const spinTimeout = useRef(null);\r\n  const spinAngleStart = useRef(0);\r\n  const spinTime = useRef(0);\r\n  const spinTimeTotal = useRef(0);\r\n  const arc = useRef(0);\r\n\r\n  // Function to generate a unique color using HSL for better distinction\r\n  const getUniqueColor = (index, total) => {\r\n    const hue = index * (360 / total);\r\n    return `hsl(${hue}, 80%, 60%)`;\r\n  };\r\n\r\n  // Initialize the wheel\r\n  useEffect(() => {\r\n    drawWheel();\r\n    // Cleanup on unmount\r\n    return () => clearTimeout(spinTimeout.current);\r\n  }, [segments, colors]);\r\n\r\n  const addName = () => {\r\n    const name = nameField.trim();\r\n    if (name && !segments.includes(name)) {\r\n      const newSegments = [...segments, name];\r\n      setSegments(newSegments);\r\n      setColors(newSegments.map((_, idx) => getUniqueColor(idx, newSegments.length)));\r\n      setNameField('');\r\n    }\r\n  };\r\n\r\n  const clearSegments = () => {\r\n    setSegments([]);\r\n    setColors([]);\r\n    setResult(''); // Clear any result message\r\n    startAngle.current = 0; // Reset the wheel angle if desired\r\n  };\r\n\r\n  const drawWheel = () => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n    const ctx = canvas.getContext('2d');\r\n    const numSegments = segments.length;\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    if (numSegments === 0) {\r\n      // Draw default wheel if no segments\r\n      const defaultColor = '#cccccc';\r\n      ctx.fillStyle = defaultColor;\r\n      ctx.beginPath();\r\n      ctx.arc(canvas.width / 2, canvas.height / 2, canvas.width / 2 - 5, 0, Math.PI * 2, false);\r\n      ctx.fill();\r\n\r\n      // Draw border\r\n      ctx.lineWidth = 5;\r\n      ctx.strokeStyle = '#333';\r\n      ctx.stroke();\r\n\r\n      // Draw center circle\r\n      ctx.beginPath();\r\n      ctx.arc(canvas.width / 2, canvas.height / 2, 20, 0, Math.PI * 2, false);\r\n      ctx.fillStyle = '#ffffff';\r\n      ctx.fill();\r\n      ctx.lineWidth = 2;\r\n      ctx.strokeStyle = '#333';\r\n      ctx.stroke();\r\n\r\n      return;\r\n    }\r\n\r\n    arc.current = (Math.PI * 2) / numSegments;\r\n\r\n    for (let i = 0; i < numSegments; i++) {\r\n      const angle = startAngle.current + i * arc.current;\r\n      ctx.fillStyle = colors[i] || getUniqueColor(i, numSegments);\r\n      ctx.beginPath();\r\n      ctx.moveTo(canvas.width / 2, canvas.height / 2);\r\n      ctx.arc(\r\n        canvas.width / 2,\r\n        canvas.height / 2,\r\n        canvas.width / 2 - 5,\r\n        angle,\r\n        angle + arc.current,\r\n        false\r\n      );\r\n      ctx.lineTo(canvas.width / 2, canvas.height / 2);\r\n      ctx.fill();\r\n    }\r\n\r\n    // Draw center circle\r\n    ctx.beginPath();\r\n    ctx.arc(canvas.width / 2, canvas.height / 2, 20, 0, Math.PI * 2, false);\r\n    ctx.fillStyle = '#ffffff';\r\n    ctx.fill();\r\n    ctx.lineWidth = 2;\r\n    ctx.strokeStyle = '#333';\r\n    ctx.stroke();\r\n\r\n    // Draw outer border\r\n    ctx.beginPath();\r\n    ctx.arc(canvas.width / 2, canvas.height / 2, canvas.width / 2 - 5, 0, Math.PI * 2, false);\r\n    ctx.lineWidth = 5;\r\n    ctx.strokeStyle = '#333';\r\n    ctx.stroke();\r\n\r\n    // Draw text labels\r\n    for (let i = 0; i < numSegments; i++) {\r\n      const angle = startAngle.current + i * arc.current + arc.current / 2;\r\n      ctx.save();\r\n      ctx.translate(canvas.width / 2, canvas.height / 2);\r\n      ctx.rotate(angle);\r\n      ctx.textAlign = 'right';\r\n      ctx.fillStyle = '#fff';\r\n      ctx.font = '12px Arial';\r\n      ctx.fillText(segments[i], canvas.width / 2 - 15, 5);\r\n      ctx.restore();\r\n    }\r\n  };\r\n\r\n  const spin = () => {\r\n    if (isSpinning || segments.length === 0) return;\r\n    setIsSpinning(true);\r\n    spinAngleStart.current = Math.random() * 10 + 10; // Random spin angle between 10-20\r\n    spinTime.current = 0;\r\n    spinTimeTotal.current = Math.random() * 3000 + 4000; // Spin duration between 4-7 seconds\r\n    rotateWheel();\r\n  };\r\n\r\n  const rotateWheel = () => {\r\n    spinTime.current += 30;\r\n    if (spinTime.current >= spinTimeTotal.current) {\r\n      stopRotateWheel();\r\n      return;\r\n    }\r\n    const spinAngle =\r\n      spinAngleStart.current - easeOut(spinTime.current, 0, spinAngleStart.current, spinTimeTotal.current);\r\n    startAngle.current += (spinAngle * Math.PI) / 180;\r\n    drawWheel();\r\n    spinTimeout.current = setTimeout(rotateWheel, 30);\r\n  };\r\n\r\n  const stopRotateWheel = () => {\r\n    clearTimeout(spinTimeout.current);\r\n    const degrees = (startAngle.current * 180) / Math.PI + 90; // +90 to align with arrow pointing downward\r\n    const arcd = (arc.current * 180) / Math.PI;\r\n    const index = Math.floor((360 - (degrees % 360)) / arcd);\r\n    const selected = segments[index % segments.length];\r\n    setResult(`ðŸŽ‰ You won: ${selected}! ðŸŽ‰`);\r\n    setIsSpinning(false);\r\n  };\r\n\r\n  const easeOut = (t, b, c, d) => {\r\n    const ts = (t /= d) * t;\r\n    const tc = ts * t;\r\n    return b + c * (tc + -3 * ts + 3 * t);\r\n  };\r\n\r\n  return (\r\n    <div className=\"wheel-section\">\r\n      <h2>Spin the Wheel</h2>\r\n      <div className=\"wheel-container\">\r\n        <canvas ref={canvasRef} width=\"200\" height=\"200\" />\r\n        <div className=\"arrow\"></div>\r\n      </div>\r\n      <div className=\"nameInput\">\r\n        <input\r\n          type=\"text\"\r\n          value={nameField}\r\n          onChange={(e) => setNameField(e.target.value)}\r\n          placeholder=\"Enter name\"\r\n        />\r\n        <button onClick={addName}>Add</button>\r\n        <button onClick={clearSegments}>Clear</button> {/* The new Clear button */}\r\n      </div>\r\n      <button onClick={spin}>Spin the Wheel!</button>\r\n      <div className=\"nameList\">\r\n        <strong>Participants:</strong> {segments.length > 0 ? segments.join(', ') : 'None'}\r\n      </div>\r\n      <div className=\"result\">{result}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WheelSection;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}