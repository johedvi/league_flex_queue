{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\johan\\\\Desktop\\\\league-manager-react\\\\frontend\\\\src\\\\contexts\\\\QueueContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const QueueContext = /*#__PURE__*/createContext();\nexport const QueueProvider = ({\n  children\n}) => {\n  _s();\n  const [queue, setQueue] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch the queue from the backend\n  const fetchQueue = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('/api/queue');\n      setQueue(response.data.queue);\n      setLoading(false);\n    } catch (err) {\n      console.error('Error fetching queue:', err);\n      setError('Failed to fetch queue.');\n      setLoading(false);\n    }\n  };\n\n  // Initial fetch on component mount\n  useEffect(() => {\n    fetchQueue();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(QueueContext.Provider, {\n    value: {\n      queue,\n      setQueue,\n      fetchQueue,\n      loading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(QueueProvider, \"e4lsvL17b1mX8htF2jUYnvUf/WY=\");\n_c = QueueProvider;\nvar _c;\n$RefreshReg$(_c, \"QueueProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","QueueContext","QueueProvider","children","_s","queue","setQueue","loading","setLoading","error","setError","fetchQueue","response","get","data","err","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/johan/Desktop/league-manager-react/frontend/src/contexts/QueueContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const QueueContext = createContext();\r\n\r\nexport const QueueProvider = ({ children }) => {\r\n  const [queue, setQueue] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch the queue from the backend\r\n  const fetchQueue = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.get('/api/queue');\r\n      setQueue(response.data.queue);\r\n      setLoading(false);\r\n    } catch (err) {\r\n      console.error('Error fetching queue:', err);\r\n      setError('Failed to fetch queue.');\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Initial fetch on component mount\r\n  useEffect(() => {\r\n    fetchQueue();\r\n  }, []);\r\n\r\n  return (\r\n    <QueueContext.Provider value={{ queue, setQueue, fetchQueue, loading, error }}>\r\n      {children}\r\n    </QueueContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,OAAO,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMO,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAMe,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACFH,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMI,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,YAAY,CAAC;MAC9CP,QAAQ,CAACM,QAAQ,CAACE,IAAI,CAACT,KAAK,CAAC;MAC7BG,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZC,OAAO,CAACP,KAAK,CAAC,uBAAuB,EAAEM,GAAG,CAAC;MAC3CL,QAAQ,CAAC,wBAAwB,CAAC;MAClCF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACAX,SAAS,CAAC,MAAM;IACdc,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEX,OAAA,CAACC,YAAY,CAACgB,QAAQ;IAACC,KAAK,EAAE;MAAEb,KAAK;MAAEC,QAAQ;MAAEK,UAAU;MAAEJ,OAAO;MAAEE;IAAM,CAAE;IAAAN,QAAA,EAC3EA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAAClB,EAAA,CA7BWF,aAAa;AAAAqB,EAAA,GAAbrB,aAAa;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}