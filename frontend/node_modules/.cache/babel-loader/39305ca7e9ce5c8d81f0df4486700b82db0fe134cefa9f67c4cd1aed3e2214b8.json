{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\johan\\\\Desktop\\\\league-manager-react\\\\frontend\\\\src\\\\contexts\\\\QueueContext.js\",\n  _s = $RefreshSig$();\n// frontend/src/contexts/QueueContext.js\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\n\n// Create the QueueContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const QueueContext = /*#__PURE__*/createContext();\n\n// Initialize Socket.IO client outside the component to ensure a single instance\nconst socket = io('http://localhost:5000', {\n  // Use 'http://' for local development\n  transports: ['websocket']\n  // Removed 'cors' as it's handled by the server\n});\n\n// Create the QueueProvider component\nexport const QueueProvider = ({\n  children\n}) => {\n  _s();\n  const [queue, setQueue] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Listen for 'queue_updated' events from the server\n    const handleQueueUpdated = data => {\n      console.log('Queue updated via WebSocket:', data.queue);\n      setQueue(data.queue);\n      setLoading(false);\n    };\n\n    // Listen for successful connection\n    const handleConnect = () => {\n      console.log('Connected to WebSocket server');\n    };\n\n    // Listen for disconnection\n    const handleDisconnect = reason => {\n      console.log('Disconnected from WebSocket server:', reason);\n      if (reason === 'io server disconnect') {\n        // The disconnection was initiated by the server, need to reconnect manually\n        socket.connect();\n      }\n    };\n\n    // Handle socket connection errors\n    const handleConnectError = err => {\n      console.error('WebSocket connection error:', err);\n      setError('WebSocket connection failed.');\n    };\n    socket.on('queue_updated', handleQueueUpdated);\n    socket.on('connect', handleConnect);\n    socket.on('disconnect', handleDisconnect);\n    socket.on('connect_error', handleConnectError);\n\n    // Cleanup on unmount\n    return () => {\n      socket.off('queue_updated', handleQueueUpdated);\n      socket.off('connect', handleConnect);\n      socket.off('disconnect', handleDisconnect);\n      socket.off('connect_error', handleConnectError);\n      socket.disconnect();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(QueueContext.Provider, {\n    value: {\n      queue,\n      setQueue,\n      loading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(QueueProvider, \"e4lsvL17b1mX8htF2jUYnvUf/WY=\");\n_c = QueueProvider;\nvar _c;\n$RefreshReg$(_c, \"QueueProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","io","jsxDEV","_jsxDEV","QueueContext","socket","transports","QueueProvider","children","_s","queue","setQueue","loading","setLoading","error","setError","handleQueueUpdated","data","console","log","handleConnect","handleDisconnect","reason","connect","handleConnectError","err","on","off","disconnect","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/johan/Desktop/league-manager-react/frontend/src/contexts/QueueContext.js"],"sourcesContent":["// frontend/src/contexts/QueueContext.js\r\n\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\n\r\n// Create the QueueContext\r\nexport const QueueContext = createContext();\r\n\r\n// Initialize Socket.IO client outside the component to ensure a single instance\r\nconst socket = io('http://localhost:5000', { // Use 'http://' for local development\r\n  transports: ['websocket'],\r\n  // Removed 'cors' as it's handled by the server\r\n});\r\n\r\n// Create the QueueProvider component\r\nexport const QueueProvider = ({ children }) => {\r\n  const [queue, setQueue] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Listen for 'queue_updated' events from the server\r\n    const handleQueueUpdated = (data) => {\r\n      console.log('Queue updated via WebSocket:', data.queue);\r\n      setQueue(data.queue);\r\n      setLoading(false);\r\n    };\r\n\r\n    // Listen for successful connection\r\n    const handleConnect = () => {\r\n      console.log('Connected to WebSocket server');\r\n    };\r\n\r\n    // Listen for disconnection\r\n    const handleDisconnect = (reason) => {\r\n      console.log('Disconnected from WebSocket server:', reason);\r\n      if (reason === 'io server disconnect') {\r\n        // The disconnection was initiated by the server, need to reconnect manually\r\n        socket.connect();\r\n      }\r\n    };\r\n\r\n    // Handle socket connection errors\r\n    const handleConnectError = (err) => {\r\n      console.error('WebSocket connection error:', err);\r\n      setError('WebSocket connection failed.');\r\n    };\r\n\r\n    socket.on('queue_updated', handleQueueUpdated);\r\n    socket.on('connect', handleConnect);\r\n    socket.on('disconnect', handleDisconnect);\r\n    socket.on('connect_error', handleConnectError);\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      socket.off('queue_updated', handleQueueUpdated);\r\n      socket.off('connect', handleConnect);\r\n      socket.off('disconnect', handleDisconnect);\r\n      socket.off('connect_error', handleConnectError);\r\n      socket.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <QueueContext.Provider value={{ queue, setQueue, loading, error }}>\r\n      {children}\r\n    </QueueContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,SAASC,EAAE,QAAQ,kBAAkB;;AAErC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;;AAE3C;AACA,MAAMO,MAAM,GAAGJ,EAAE,CAAC,uBAAuB,EAAE;EAAE;EAC3CK,UAAU,EAAE,CAAC,WAAW;EACxB;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMgB,kBAAkB,GAAIC,IAAI,IAAK;MACnCC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,IAAI,CAACP,KAAK,CAAC;MACvDC,QAAQ,CAACM,IAAI,CAACP,KAAK,CAAC;MACpBG,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC;;IAED;IACA,MAAMO,aAAa,GAAGA,CAAA,KAAM;MAC1BF,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC9C,CAAC;;IAED;IACA,MAAME,gBAAgB,GAAIC,MAAM,IAAK;MACnCJ,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEG,MAAM,CAAC;MAC1D,IAAIA,MAAM,KAAK,sBAAsB,EAAE;QACrC;QACAjB,MAAM,CAACkB,OAAO,CAAC,CAAC;MAClB;IACF,CAAC;;IAED;IACA,MAAMC,kBAAkB,GAAIC,GAAG,IAAK;MAClCP,OAAO,CAACJ,KAAK,CAAC,6BAA6B,EAAEW,GAAG,CAAC;MACjDV,QAAQ,CAAC,8BAA8B,CAAC;IAC1C,CAAC;IAEDV,MAAM,CAACqB,EAAE,CAAC,eAAe,EAAEV,kBAAkB,CAAC;IAC9CX,MAAM,CAACqB,EAAE,CAAC,SAAS,EAAEN,aAAa,CAAC;IACnCf,MAAM,CAACqB,EAAE,CAAC,YAAY,EAAEL,gBAAgB,CAAC;IACzChB,MAAM,CAACqB,EAAE,CAAC,eAAe,EAAEF,kBAAkB,CAAC;;IAE9C;IACA,OAAO,MAAM;MACXnB,MAAM,CAACsB,GAAG,CAAC,eAAe,EAAEX,kBAAkB,CAAC;MAC/CX,MAAM,CAACsB,GAAG,CAAC,SAAS,EAAEP,aAAa,CAAC;MACpCf,MAAM,CAACsB,GAAG,CAAC,YAAY,EAAEN,gBAAgB,CAAC;MAC1ChB,MAAM,CAACsB,GAAG,CAAC,eAAe,EAAEH,kBAAkB,CAAC;MAC/CnB,MAAM,CAACuB,UAAU,CAAC,CAAC;IACrB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEzB,OAAA,CAACC,YAAY,CAACyB,QAAQ;IAACC,KAAK,EAAE;MAAEpB,KAAK;MAAEC,QAAQ;MAAEC,OAAO;MAAEE;IAAM,CAAE;IAAAN,QAAA,EAC/DA;EAAQ;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACzB,EAAA,CArDWF,aAAa;AAAA4B,EAAA,GAAb5B,aAAa;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}